{"version":3,"sources":["utils/api/index.js","Deck/List.js","Home/index.js","Deck/Study/StudyCard.js","Deck/Study/StudyPage.js","Deck/Study/StudyNotEnoughCards.js","Deck/Study/index.js","Layout/NotFound.js","Layout/Header.js","Deck/Form.js","Deck/Edit.js","Card/List.js","Deck/View.js","Card/Form.js","Card/Edit.js","Card/Create.js","Deck/Create.js","Layout/index.js","App.js","index.js"],"names":["API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","signal","method","body","JSON","stringify","readDeck","deckId","updatedDeck","id","deleteDeck","card","Number","cardId","updatedCard","append","DeckList","useState","decks","setDecks","loadDecks","listDecks","then","useEffect","list","map","className","length","description","to","title","onClick","window","confirm","Home","nextView","front","back","StudyCard","children","view","setView","flipped","setFlipped","type","prevState","StudyPage","StudyNotEnoughCards","cardCount","Study","useParams","setDeck","cardNumber","setCardNumber","history","useHistory","cardTitle","push","Math","min","NotFound","Header","DeckForm","onSubmit","initialState","changeHandler","target","value","event","preventDefault","stopPropagation","htmlFor","required","placeholder","onChange","rows","DeckEdit","child","goBack","updateDeck","savedDeck","CardList","onCardDelete","DeckView","loadDeck","confirmed","log","deleteCard","CardForm","onDone","deckName","doneButtonLabel","setCard","tabIndex","CardEdit","doneHandler","readCard","updateCard","CardCreate","createCard","DeckCreate","createDeck","Layout","path","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd1c97eb.chunk.js","sourcesContent":["/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n// CRUD -- API DATA\n// create, read, update, delete\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\n\n// request.body.data\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\", // \"PATCH\"\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { deleteDeck, listDecks } from \"../utils/api\";\n\nfunction DeckList() {\n  const [decks, setDecks] = useState([]);\n\n  useEffect(loadDecks, []);\n  function deleteHandler(deckId) {\n    const confirmed = window.confirm(\"Delete this deck?\\n\\nYou will not be able to recover it.\");\n    if (confirmed) {\n        deleteDeck(deckId).then(loadDecks);\n    }\n  }\n\n  function loadDecks() {\n    listDecks().then(setDecks);\n  }\n\n  const list = decks.map((deck) => (\n    <li\n      key={deck.id}\n      className=\"list-group-item list-group-item-action flex-column align-items-start\"\n    >\n      <div className=\"d-flex w-100 justify-content-between\">\n        <h5 className=\"mb-1\">{deck.name}</h5>\n        <small>{deck.cards.length} cards</small>\n      </div>\n      <p className=\"mb-1\">{deck.description}</p>\n      <Link\n        to={`/decks/${deck.id}`}\n        className=\"btn btn-secondary mr-2\"\n        title=\"Edit deck\"\n      >\n        <span className=\"oi oi-eye\" /> View\n      </Link>\n      <Link\n        to={`/decks/${deck.id}/study`}\n        className=\"btn btn-primary\"\n        title=\"Study deck\"\n      >\n        <span className=\"oi oi-book\" /> Study\n      </Link>\n      <button\n        className=\"btn btn-danger float-right\"\n        title=\"Delete deck\"\n        onClick={() => deleteHandler(deck.id)}\n      >\n        <span className=\"oi oi-trash\" />\n      </button>\n    </li>\n  ));\n\n  return (\n    <div>\n      <Link to=\"/decks/new\" className=\"btn btn-secondary\">\n        <span className=\"oi oi-plus\" /> Create Deck\n      </Link>\n      <ul className=\"list-group mt-2 deck-list\">{list}</ul>\n    </div>\n  );\n}\nexport default DeckList;\n","import React from \"react\";\nimport DeckList from \"../Deck/List\";\n\nfunction Home() {\n  return (\n    <div className=\"Home container\">\n      <DeckList />\n    </div>\n  );\n}\n\nexport default Home;","import React, { useEffect, useState } from \"react\";\n\nconst nextView = {\n  front: \"back\",\n  back: \"front\",\n};\n\nfunction StudyCard({ card = {}, title, children }) {\n  const [view, setView] = useState(\"front\");\n  const [flipped, setFlipped] = useState(false);\n\n  function flipHandler() {\n    setView((prevState) => nextView[prevState]);\n    setFlipped(true);\n  }\n\n  useEffect(() => {\n    setView(\"front\");\n    setFlipped(false);\n  }, [card]);\n\n  return (\n    <div className={`card ${view} study-card`}>\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">{title}</h5>\n        <p className=\"card-text\">{card[view]}</p>\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary mr-2\"\n          onClick={flipHandler}\n        >\n          Flip\n        </button>\n        {flipped && children}\n      </div>\n    </div>\n  );\n}\nexport default StudyCard;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction StudyPage({ deckId, name, children }) {\n  return (\n    <main className=\"container study-page\">\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">\n              <span className=\"oi oi-home\" /> Home\n            </Link>\n          </li>\n          <li className=\"breadcrumb-item\">\n            <Link to={`/decks/${deckId}`}>{name}</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            Study\n          </li>\n        </ol>\n      </nav>\n      <h1>{name}: Study</h1>\n      {children}\n    </main>\n  );\n}\nexport default StudyPage;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction StudyNotEnoughCards({ deckId, cardCount }) {\n  return (\n    <div>\n      <h2>Not enough cards.</h2>\n      <p>\n        You need at least 3 cards to study. There are {cardCount} cards in this\n        deck.\n      </p>\n      <Link to={`/decks/${deckId}/cards/new`} className=\"btn btn-primary\">\n        <span className=\"oi oi-plus\" /> Add Cards\n      </Link>\n    </div>\n  );\n}\nexport default StudyNotEnoughCards;","import React, { useEffect, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { readDeck } from \"../../utils/api\";\nimport StudyCard from \"./StudyCard\";\nimport StudyPage from \"./StudyPage\";\nimport StudyNotEnoughCards from \"./StudyNotEnoughCards\";\n\nfunction Study() {\n  const { deckId } = useParams();\n  const [deck, setDeck] = useState({ name: \"Loading...\", cards: [] });\n  const [cardNumber, setCardNumber] = useState(1);\n  const history = useHistory();\n\n  useEffect(() => {\n    readDeck(deckId).then(setDeck);\n  }, [deckId]);\n\n  const cardCount = deck.cards.length;\n  const nextHandler = () => {\n    if (cardNumber === cardCount) {\n      const returnToHomePage = !window.confirm(\n        \"Restart cards?\\n\\nClick 'cancel' to return to the home page.\"\n      );\n      return returnToHomePage ? history.push(\"/\") : setCardNumber(1);\n    }\n    setCardNumber((prevState) => Math.min(cardCount, prevState + 1));\n  };\n\n  const cardTitle = `Card ${cardNumber} of ${cardCount}`;\n  const card = deck.cards[cardNumber - 1];\n  if (cardCount <= 2) {\n    return (\n      <StudyPage name={deck.name} deckId={deckId}>\n        <StudyNotEnoughCards deckId={deckId} cardCount={cardCount} />\n      </StudyPage>\n    );\n  }\n\n  return (\n    <StudyPage name={deck.name} deckId={deckId}>\n      <StudyCard card={card} title={cardTitle}>\n        <button type=\"button\" className=\"btn btn-primary\" onClick={nextHandler}>\n          Next\n        </button>\n      </StudyCard>\n    </StudyPage>\n  );\n}\nexport default Study;","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\nexport default Header;","import React, { useState } from \"react\";\n\nfunction DeckForm({\n  onSubmit,\n  onCancel,\n  initialState = { name: \"\", description: \"\" },\n}) {\n  const [deck, setDeck] = useState(initialState);\n\n  function changeHandler({ target: { name, value } }) {\n    setDeck((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  }\n\n  function submitHandler(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    onSubmit(deck);\n  }\n\n  return (\n    <div>\n      <form onSubmit={submitHandler} className=\"deck-edit\">\n        <fieldset>\n          <div className=\"form-group\">\n            <label htmlFor=\"name\">Name</label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              className=\"form-control\"\n              value={deck.name}\n              required={true}\n              placeholder=\"Deck Name\"\n              onChange={changeHandler}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"description\">Description</label>\n            <textarea\n              id=\"description\"\n              name=\"description\"\n              className=\"form-control\"\n              rows=\"4\"\n              required={true}\n              placeholder=\"Brief description of the deck\"\n              value={deck.description}\n              onChange={changeHandler}\n            />\n          </div>\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary mr-2\"\n            onClick={onCancel}\n          >\n            Cancel\n          </button>\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Submit\n          </button>\n        </fieldset>\n      </form>\n    </div>\n  );\n}\nexport default DeckForm;","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { readDeck, updateDeck } from \"../utils/api\";\nimport DeckForm from \"./Form\";\n\nfunction DeckEdit() {\n  const history = useHistory();\n  const { deckId } = useParams();\n\n  const [deck, setDeck] = useState({ name: \"\", description: \"\" });\n\n  useEffect(() => {\n    readDeck(deckId).then(setDeck);\n  }, [deckId]);\n\n  function submitHandler(updatedDeck) {\n    updateDeck(updatedDeck).then((savedDeck) =>\n      history.push(`/decks/${savedDeck.id}`)\n    );\n  }\n\n  function cancel() {\n    history.goBack();\n  }\n\n  const child = deck.id ? (\n    <DeckForm onCancel={cancel} onSubmit={submitHandler} initialState={deck} />\n  ) : (\n    <p>Loading...</p>\n  );\n\n  return (\n    <div>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">\n              <span className=\"oi oi-home\" /> Home\n            </Link>\n          </li>\n          <li className=\"breadcrumb-item\">\n            <Link to={`/decks/${deckId}`}>{deck.name}</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            Edit Deck\n          </li>\n        </ol>\n      </nav>\n      <h1>Edit Deck</h1>\n      {child}\n    </div>\n  );\n}\nexport default DeckEdit;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction CardList({ deck, onCardDelete }) {\n  const { cards = [] } = deck;\n\n  const list = cards.map((card) => (\n    <li\n      key={card.id}\n      className=\"list-group-item list-group-item-action flex-column align-items-start\"\n    >\n      <div className=\"row\">\n        <div className=\"col-md-10\">\n          <div className=\"row\">\n            <div className=\"col\">{card.front}</div>\n            <div className=\"col\">{card.back}</div>\n          </div>\n        </div>\n        <div className=\"col text-right\">\n          <Link\n            to={`/decks/${deck.id}/cards/${card.id}/edit`}\n            className=\"btn btn-secondary mr-2\"\n            title=\"Edit Card\"\n          >\n            <span className=\"oi oi-pencil\" /> Edit\n          </Link>\n          <button className=\"btn btn-danger\" title=\"Delete Card\">\n            <span\n              className=\"oi oi-trash\"\n              onClick={() => onCardDelete(card.id)}\n            />\n          </button>\n        </div>\n      </div>\n    </li>\n  ));\n  return (\n    <div className=\"mt-4 card-list\">\n      <h3>Cards</h3>\n      <ul className=\"list-group\">{list}</ul>\n    </div>\n  );\n}\nexport default CardList;","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { deleteCard, deleteDeck, readDeck } from \"../utils/api\";\nimport CardList from \"../Card/List\";\n\nfunction DeckView() {\n    const history = useHistory();\n    const { deckId } = useParams();\n    const [deck, setDeck] = useState({ cards: [] });\n  \n    useEffect(loadDeck, [deckId]);\n    function loadDeck() {\n      readDeck(deckId).then(setDeck);\n    }\n  \n    function handleDelete() {\n      const confirmed = window.confirm(\n        \"Delete this deck?\\n\\nYou will not be able to recover it.\"\n      );\n      if (confirmed) {\n        deleteDeck(deck.id).then(() => history.push(\"/decks\"));\n      }\n    }\n  \n    function deleteCardHandler(cardId) {\n      const confirmed = window.confirm(\n        \"Delete this card?\\n\\nYou will not be able to recover it.\"\n      );\n      if (confirmed) {\n        console.log(\"deleteCardHandler\", confirmed, cardId);\n        deleteCard(cardId).then(loadDeck);\n      }\n    }\n  \n    return (\n      <main className=\"container deck-view\">\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <Link to=\"/\">\n                <span className=\"oi oi-home\" /> Home\n              </Link>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              {deck.name}\n            </li>\n          </ol>\n        </nav>\n        <div className=\"media mb-2\">\n          <div className=\"media-body\">\n            <h5 className=\"mt-0\">{deck.name}</h5>\n            {deck.description}\n          </div>\n        </div>\n        <Link\n          to={`/decks/${deck.id}/edit`}\n          className=\"btn btn-secondary mr-2\"\n          title=\"Edit deck\"\n        >\n          <span className=\"oi oi-pencil\" /> Edit\n        </Link>\n        <Link\n          to={`/decks/${deck.id}/study`}\n          className=\"btn btn-primary mr-2\"\n          title=\"Study deck\"\n        >\n          <span className=\"oi oi-book\" /> Study\n        </Link>\n        <Link\n          to={`/decks/${deck.id}/cards/new`}\n          className=\"btn btn-primary\"\n          title=\"Add Card\"\n        >\n          <span className=\"oi oi-plus\" /> Add Cards\n        </Link>\n        <button className=\"btn btn-danger float-right\" title=\"Delete deck\">\n          <span className=\"oi oi-trash\" onClick={handleDelete} />\n        </button>\n        <CardList deck={deck} onCardDelete={deleteCardHandler} />\n      </main>\n    );\n}\nexport default DeckView;","import React, { useState } from \"react\";\n\nfunction CardForm({\n  onSubmit,\n  onDone,\n  deckName = \"Loading...\",\n  initialState,\n  doneButtonLabel = \"Done\",\n}) {\n  const [card, setCard] = useState(initialState);\n\n  function changeHandler({ target: { name, value } }) {\n    setCard((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  }\n\n  function submitHandler(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    onSubmit({ ...card });\n    setCard({ front: \"\", back: \"\" });\n  }\n\n  return (\n    <form onSubmit={submitHandler} className=\"card-form\">\n      <fieldset>\n        <legend>{deckName}: Add Card</legend>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"front\">Front</label>\n          <textarea\n            id=\"front\"\n            name=\"front\"\n            tabIndex=\"1\"\n            className=\"form-control\"\n            required={true}\n            placeholder=\"Front side of card\"\n            value={card.front}\n            onChange={changeHandler}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"back\">Back</label>\n          <textarea\n            id=\"back\"\n            name=\"back\"\n            tabIndex=\"2\"\n            className=\"form-control\"\n            required={true}\n            placeholder=\"Back side of card\"\n            value={card.back}\n            onChange={changeHandler}\n          />\n        </div>\n\n        <button\n          className=\"btn btn-secondary mr-2\"\n          onClick={onDone}\n          tabIndex=\"4\"\n        >\n          {doneButtonLabel}\n        </button>\n        <button type=\"submit\" className=\"btn btn-primary\" tabIndex=\"3\">\n          Save\n        </button>\n      </fieldset>\n    </form>\n  );\n}\nexport default CardForm;","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { readCard, readDeck, updateCard } from \"../utils/api\";\nimport CardForm from \"./Form\";\n\nfunction CardEdit({ title }) {\n  const history = useHistory();\n  const { deckId, cardId } = useParams();\n\n  const [card, setCard] = useState({ front: \"\", back: \"\" });\n  const [deck, setDeck] = useState({ cards: [] });\n\n  useEffect(() => {\n    readDeck(deckId).then(setDeck);\n    readCard(cardId).then(setCard);\n  }, [deckId, cardId]);\n\n  function submitHandler(card) {\n    updateCard(card).then(doneHandler);\n  }\n\n  function doneHandler() {\n    history.push(`/decks/${deck.id}`);\n  }\n\n  const child = card.id ? (\n    <CardForm\n      onSubmit={submitHandler}\n      onDone={doneHandler}\n      deckName={deck.name}\n      initialState={card}\n      doneButtonLabel=\"Cancel\"\n    />\n  ) : (\n    <p>Loading...</p>\n  );\n  return (\n    <div>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">\n              <span className=\"oi oi-home\" /> Home\n            </Link>\n          </li>\n          <li className=\"breadcrumb-item\">\n            <Link to={`/decks/${deckId}`}>Deck {deck.name}</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            Edit Card {cardId}\n          </li>\n        </ol>\n      </nav>\n      <h2>Edit Card</h2>\n      {child}\n    </div>\n  );\n}\nexport default CardEdit;","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { createCard, readDeck } from \"../utils/api\";\nimport CardForm from \"./Form\";\n\nfunction CardCreate() {\n  const history = useHistory();\n  const { deckId } = useParams();\n  const [deck, setDeck] = useState({ cards: [] });\n\n  useEffect(() => {\n    readDeck(deckId).then(setDeck);\n  }, [deckId]);\n\n  function submitHandler(card) {\n    createCard(deckId, card);\n  }\n\n  function doneHandler() {\n    history.push(`/decks/${deckId}`);\n  }\n  return (\n    <div>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">\n              <span className=\"oi oi-home\" /> Home\n            </Link>\n          </li>\n          <li className=\"breadcrumb-item\">\n            <Link to={`/decks/${deckId}`}>{deck.name}</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            Add Card\n          </li>\n        </ol>\n      </nav>\n      <CardForm\n        deckName={deck.name}\n        initialState={deck}\n        onSubmit={submitHandler}\n        onDone={doneHandler}\n      />\n    </div>\n  );\n}\nexport default CardCreate;","import React from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { createDeck } from \"../utils/api\";\nimport DeckForm from \"./Form\";\n\nfunction DeckCreate() {\n  const history = useHistory();\n\n  function submitHandler(deck) {\n    createDeck(deck).then((savedDeck) =>\n      history.push(`/decks/${savedDeck.id}`)\n    );\n  }\n\n  function cancel() {\n    history.goBack();\n  }\n  return (\n    <div>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">\n              <span className=\"oi oi-home\" /> Home\n            </Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            Create Deck\n          </li>\n        </ol>\n      </nav>\n      <h1>Create Deck</h1>\n      <DeckForm onCancel={cancel} onSubmit={submitHandler} />\n    </div>\n  );\n}\nexport default DeckCreate;","import React from \"react\";\nimport { Redirect, Switch, Route } from \"react-router-dom\";\nimport Home from \"../Home\";\nimport Study from \"../Deck/Study\";\nimport NotFound from \"./NotFound\";\nimport Header from \"./Header\";\nimport DeckEdit from \"../Deck/Edit\";\nimport DeckView from \"../Deck/View\";\nimport CardEdit from \"../Card/Edit\";\nimport CardCreate from \"../Card/Create\";\nimport DeckCreate from \"../Deck/Create\";\n\n\nfunction Layout() {\n  return (\n    <div>\n      <Header />\n      <div className=\"container\">\n        {/* TODO: Implement the screen starting here */}\n        <Switch>\n          <Route path=\"/decks/new\">\n            <DeckCreate />\n          </Route>\n          <Route path=\"/decks/:deckId/study\">\n            <Study />\n          </Route>\n          <Route path=\"/decks/:deckId/edit\">\n            <DeckEdit />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/new\">\n            <CardCreate />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n            <CardEdit />\n          </Route>\n          <Route exact={true} path=\"/decks/:deckId\" >\n            <DeckView />\n          </Route>\n          <Route exact={true} path=\"/decks\"> \n            <Redirect to=\"/\" />\n          </Route>\n          <Route exact={true} path=\"/\" >\n            <Home />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}\nexport default Layout;","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}